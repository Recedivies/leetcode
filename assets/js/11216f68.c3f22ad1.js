"use strict";(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[8583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={description:"Author: @Recedivies | https://leetcode.com/problems/number-of-provinces/"},a="547 - Number of Provinces (Medium)",c={unversionedId:"1000/number-of-provinces-medium",id:"1000/number-of-provinces-medium",title:"547 - Number of Provinces (Medium)",description:"Author: @Recedivies | https://leetcode.com/problems/number-of-provinces/",source:"@site/solutions/0001 - 1000/547-number-of-provinces-medium.md",sourceDirName:"0001 - 1000",slug:"/1000/number-of-provinces-medium",permalink:"/leetcode/solutions/1000/number-of-provinces-medium",draft:!1,editUrl:"https://github.com/Recedivies/leetcode/solutions/0001 - 1000/547-number-of-provinces-medium.md",tags:[],version:"current",sidebarPosition:547,frontMatter:{description:"Author: @Recedivies | https://leetcode.com/problems/number-of-provinces/"},sidebar:"tutorialSidebar",previous:{title:"0001 - 1000",permalink:"/leetcode/solutions/category/0001---1000"},next:{title:"1001 - 2000",permalink:"/leetcode/solutions/category/1001---2000"}},p={},l=[{value:"Problem Link",id:"problem-link",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Approach 1: DFS",id:"approach-1-dfs",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=s("Tabs"),m=s("TabItem"),d=s("SolutionAuthor"),f={toc:l},v="wrapper";function b(e){let{components:t,...n}=e;return(0,o.kt)(v,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"547---number-of-provinces-medium"},"547 - Number of Provinces (Medium)"),(0,o.kt)("h2",{id:"problem-link"},"Problem Link"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/number-of-provinces/"},"https://leetcode.com/problems/number-of-provinces/")),(0,o.kt)("h2",{id:"problem-statement"},"Problem Statement"),(0,o.kt)("p",null,"There are ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," cities. Some of them are connected, while some are not. If city ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," is connected directly with city ",(0,o.kt)("inlineCode",{parentName:"p"},"b"),", and city ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," is connected directly with city ",(0,o.kt)("inlineCode",{parentName:"p"},"c"),", then city ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," is connected indirectly with city ",(0,o.kt)("inlineCode",{parentName:"p"},"c"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"province")," is a group of directly or indirectly connected cities and no other cities outside of the group."),(0,o.kt)("p",null,"You are given an ",(0,o.kt)("inlineCode",{parentName:"p"},"n x n")," matrix ",(0,o.kt)("inlineCode",{parentName:"p"},"isConnected")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"isConnected[i][j] = 1")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"ith")," city and the ",(0,o.kt)("inlineCode",{parentName:"p"},"jth")," city are directly connected, and ",(0,o.kt)("inlineCode",{parentName:"p"},"isConnected[i][j] = 0")," otherwise."),(0,o.kt)("p",null,"Return ",(0,o.kt)("em",{parentName:"p"},"the total number of ",(0,o.kt)("strong",{parentName:"em"},"provinces")),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"1 <= n <= 200"),(0,o.kt)("li",{parentName:"ul"},"n == isConnected.length"),(0,o.kt)("li",{parentName:"ul"},"n == isConnected","[i]",".length"),(0,o.kt)("li",{parentName:"ul"},"isConnected","[i][j]"," is 1 or 0."),(0,o.kt)("li",{parentName:"ul"},"isConnected","[i][i]"," == 1"),(0,o.kt)("li",{parentName:"ul"},"isConnected","[i][j]"," == isConnected","[j][i]")),(0,o.kt)("h2",{id:"approach-1-dfs"},"Approach 1: DFS"),(0,o.kt)(u,{mdxType:"Tabs"},(0,o.kt)(m,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)(d,{name:"@Recedivies",link:"https://github.com/Recedivies",mdxType:"SolutionAuthor"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    bool vis[201];\n    int n;\n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int ans = 0;\n        n=isConnected.size();\n        for (int i = 0; i < n; i++) {\n            if (vis[i]) continue;\n            ans++;\n            dfs(i, isConnected);\n        }\n        return ans;\n    }\n    void dfs(int u, vector<vector<int>>& isConnected) {\n        vis[u]=1;\n        for (int v = 0; v < n; v++) {\n            if (isConnected[u][v]==0||vis[v]) continue;\n            dfs(v, isConnected);\n        }\n    }\n};\n")))))}b.isMDXComponent=!0}}]);